generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ─── ENUMS ─────────────────────────────────────────────────────────────────────

/// Roles de usuario
enum Role {
  CLI
  T_I
  T_II
  T_III
}

/// Estados de la orden (negocio)
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

/// Métodos de pago soportados por MercadoPago
enum MPPaymentMethod {
  atm
  credit_card
  debit_card
  ticket
  bank_transfer
  account_money
}

/// Estados de la transacción en MercadoPago
enum MPPaymentStatus {
  approved
  authorized
  cancelled
  charged_back
  in_mediation
  in_process
  pending
  refunded
  rejected
}

// ─── MODELOS ────────────────────────────────────────────────────────────────────

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(CLI)
  orders    Order[]
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  sku         String      @unique
  name        String
  price       Decimal     @db.Decimal(10, 2)
  description String?
  stock       Int
  imageUrl    String?
  orderItems  OrderItem[]
  cartItems   CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Coupon {
  id              String   @id @default(cuid())
  code            String   @unique
  discountPercent Int
  validUntil      DateTime
  maxUses         Int?
  usedCount       Int      @default(0)
  orders          Order[]
  createdAt       DateTime @default(now())
}

// Orden principal
model Order {
  id             String          @id @default(cuid())
  code           String          @unique
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  items          OrderItem[]
  subtotal       Decimal         @default(0) @db.Decimal(10, 2)
  discountAmount Decimal         @default(0) @db.Decimal(10, 2)
  shippingCost   Decimal         @default(0) @db.Decimal(10, 2)
  total          Decimal         @db.Decimal(10, 2)
  status         OrderStatus     @default(PENDING)
  paymentMethod  MPPaymentMethod
  paymentStatus  MPPaymentStatus
  couponId       String?
  coupon         Coupon?         @relation(fields: [couponId], references: [id])
  payments       Payment[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([userId, createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2) // snapshot del precio unitario
}

/// Historial de pagos (solo MercadoPago)
model Payment {
  id            String          @id @default(cuid())
  orderId       String
  order         Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  preferenceId  String?         @unique
  externalId    String?         @unique
  method        MPPaymentMethod
  status        MPPaymentStatus @default(pending)
  transactionId String?
  amount        Decimal         @db.Decimal(10, 2)
  currency      String          @default("MXN")
  rawPayload    Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  webhookEvents WebhookEvent[]

  @@index([orderId])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId], name: "userId_productId")
}

model WebhookEvent {
  id         String   @id @default(cuid())
  eventId    String   @unique
  type       String
  rawPayload Json
  receivedAt DateTime @default(now())
  processed  Boolean  @default(false)

  paymentId String?
  payment   Payment? @relation(fields: [paymentId], references: [id])

  @@index([eventId])
  @@index([type])
}
